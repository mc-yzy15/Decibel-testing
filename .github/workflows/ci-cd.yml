name: Decibel-testing 全自动CI/CD Pipeline

on:
  # 主分支推送触发正式版本构建
  push:
    branches: [main]
    tags: ['v*.*.*']  # 支持通过标签触发特定版本构建
  # 开发分支触发开发版本构建
  push:
    branches: [dev]
  # Pull Request触发测试构建
  pull_request:
    branches: [main, dev]
  # 定时触发夜间构建
  schedule:
    - cron: '0 0 * * *'  # 每天凌晨0点触发
  # 手动触发选项（保留但不作为主要触发方式）
  workflow_dispatch: {


jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: decibel-testing-linux
            asset_name: decibel-testing-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: decibel-testing-windows
            asset_name: decibel-testing-windows-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: decibel-testing-macos-x86_64
            asset_name: decibel-testing-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: decibel-testing-macos-arm64
            asset_name: decibel-testing-macos-arm64

    runs-on: ${{ matrix.platform.os }}
    name: Build for ${{ matrix.platform.target }}

    steps:
      - uses: actions/checkout@v4

      # 设置Node.js环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 设置Rust环境
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}

      # 缓存Rust依赖
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}

      # 安装Ubuntu系统依赖
      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      # 安装依赖并构建项目
      - name: Install dependencies and build
        run: |
          npm install
          npm run build  # 确保前端构建
          cd src-tauri
          cargo build --release --target ${{ matrix.platform.target }}

      # 打包和上传构建产物
      - name: Package and upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: |
            ${{ matrix.platform.os == 'windows-latest' && 'src-tauri/target/${{ matrix.platform.target }}/release/decibel-testing.exe' || '' }}
            ${{ matrix.platform.os == 'ubuntu-latest' && 'src-tauri/target/${{ matrix.platform.target }}/release/decibel-testing' || '' }}
            ${{ matrix.platform.os == 'macos-latest' && 'src-tauri/target/${{ matrix.platform.target }}/release/decibel-testing.app' || '' }}
          if-no-files-found: error

  # 夜间构建特定任务
  nightly-release:
    needs: build
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create nightly release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly-${{ github.sha }}
          name: Nightly Build - ${{ github.sha }}
          body: "Automated nightly build from commit ${{ github.sha }}"
          prerelease: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 开发环境部署
  dev-deploy:
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Dev environment deployment
        run: |
          echo "Deploying to development environment"
          # 这里可以添加开发环境特定的部署步骤